pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "wordpress-app"
        AWS_REGION = "ap-south-1"
        S3_BUCKET = "my-wordpress-deployments"
        MYSQL_CONTAINER = "mysql_container"
        WORDPRESS_CONTAINER = "wordpress_container"
    }
    stages {
        stage('Cleanup Docker Environment') {
            steps {
                script {
                    // Remove all stopped containers and unused images
                    sh """
                    docker rm -f $(docker ps -aq) || true
                    docker rmi -f $(docker images -q) || true
                    docker volume prune -f || true
                    docker network prune -f || true
                    """
                }
            }
        }
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/tiwarivive/wordpresssigma.git'
            }
        }
        stage('Pull Docker Image') {
            steps {
                script {
                    // Pull latest WordPress base image
                    sh "docker pull wordpress:latest"
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                    docker build -t ${DOCKER_IMAGE} .
                    """
                }
            }
        }
        stage('Run Containers') {
            steps {
                script {
                    // Start MySQL container
                    sh """
                    docker run -d \
                        --name ${MYSQL_CONTAINER} \
                        -e MYSQL_ROOT_PASSWORD=root_password \
                        -e MYSQL_DATABASE=wordpress_db \
                        -e MYSQL_USER=wordpress_user \
                        -e MYSQL_PASSWORD=wordpress_password \
                        mysql:5.7
                    """

                    // Start WordPress container
                    sh """
                    docker run -d \
                        --name ${WORDPRESS_CONTAINER} \
                        --link ${MYSQL_CONTAINER}:mysql \
                        -e WORDPRESS_DB_HOST=${MYSQL_CONTAINER}:3306 \
                        -e WORDPRESS_DB_NAME=wordpress_db \
                        -e WORDPRESS_DB_USER=wordpress_user \
                        -e WORDPRESS_DB_PASSWORD=wordpress_password \
                        -p 8080:80 \
                        ${DOCKER_IMAGE}
                    """
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    // Execute tests
                    sh "chmod +x ./run-tests.sh && ./run-tests.sh"
                }
            }
        }
        stage('Deploy CloudFormation') {
            steps {
                script {
                    sh """
                    aws cloudformation deploy \
                        --template-file ./cloudformation-template.yaml \
                        --stack-name wordpress-docker-stack \
                        --region ${AWS_REGION}
                    """
                }
            }
        }
        stage('Upload Artifacts to S3') {
            steps {
                script {
                    sh """
                    zip -r wordpress-artifacts.zip wordpress/
                    aws s3 cp wordpress-artifacts.zip s3://${S3_BUCKET}/
                    """
                }
            }
        }
    }
    post {
        always {
            script {
                // Clean up running containers after the pipeline
                sh """
                docker stop ${WORDPRESS_CONTAINER} ${MYSQL_CONTAINER} || true
                docker rm ${WORDPRESS_CONTAINER} ${MYSQL_CONTAINER} || true
                """
                // Clean up unused images and containers
                sh """
                docker rmi -f $(docker images -q) || true
                docker rm -f $(docker ps -aq) || true
                docker volume prune -f || true
                docker network prune -f || true
                """
                echo 'Cleaned up Docker environment to prevent disk space issues.'
            }
        }
    }
}
