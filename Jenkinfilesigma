pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "wordpress-app"
        AWS_REGION = "ap-south-1"
        S3_BUCKET = "my-wordpress-deployments"
        MYSQL_CONTAINER = "mysql_container"
        WORDPRESS_CONTAINER = "wordpress_container"
        BASE_WORDPRESS_IMAGE = "wordpress:php8.1-apache"
        BASE_MYSQL_IMAGE = "mysql:5.7"
    }
    stages {
        stage('Cleanup Docker Environment') {
            steps {
                script {
                    sh """
                    # Remove running containers
                    if [ \$(docker ps -q | wc -l) -gt 0 ]; then
                        echo "Stopping and removing running containers..."
                        docker stop \$(docker ps -q)
                        docker rm \$(docker ps -q)
                    fi

                    # Remove existing Docker images
                    if [ \$(docker images -q | wc -l) -gt 0 ]; then
                        echo "Removing existing Docker images..."
                        docker rmi -f \$(docker images -q)
                    fi
                    docker volume prune -f || true
                    docker network prune -f || true
                    """
                }
            }
        }
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/tiwarivive/wordpresssigma.git'
            }
        }
        stage('Pull Lightweight Base Images') {
            steps {
                script {
                    sh """
                    echo "Pulling base images..."
                    docker pull ${BASE_WORDPRESS_IMAGE}
                    docker pull ${BASE_MYSQL_IMAGE}
                    """
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                    echo "Building Docker image..."
                    docker build -t ${DOCKER_IMAGE} --build-arg BASE_IMAGE=${BASE_WORDPRESS_IMAGE} .
                    """
                }
            }
        }
        stage('Run Containers') {
            steps {
                script {
                    sh """
                    echo "Starting MySQL container..."
                    docker run -d \
                        --name ${MYSQL_CONTAINER} \
                        -e MYSQL_ROOT_PASSWORD=root_password \
                        -e MYSQL_DATABASE=wordpress_db \
                        -e MYSQL_USER=wordpress_user \
                        -e MYSQL_PASSWORD=wordpress_password \
                        ${BASE_MYSQL_IMAGE}

                    echo "Starting WordPress container..."
                    docker run -d \
                        --name ${WORDPRESS_CONTAINER} \
                        --link ${MYSQL_CONTAINER}:mysql \
                        -e WORDPRESS_DB_HOST=${MYSQL_CONTAINER}:3306 \
                        -e WORDPRESS_DB_NAME=wordpress_db \
                        -e WORDPRESS_DB_USER=wordpress_user \
                        -e WORDPRESS_DB_PASSWORD=wordpress_password \
                        -p 9090:80 \
                        ${DOCKER_IMAGE}
                    """
                }
            }
        }
    }
    post {
        always {
            script {
                echo "Cleaning up Docker environment after pipeline execution..."
                sh """
                # Stop and remove running containers
                if [ \$(docker ps -q | wc -l) -gt 0 ]; then
                    docker stop \$(docker ps -q)
                    docker rm \$(docker ps -q)
                fi

                # Remove unused images
                if [ \$(docker images -q | wc -l) -gt 0 ]; then
                    docker rmi -f \$(docker images -q)
                fi

                docker volume prune -f || true
                docker network prune -f || true
                """
            }
        }
    }
}
